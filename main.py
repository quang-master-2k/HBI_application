# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import cv2
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QImage, QPixmap
import pandas as pd
from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QLabel, QFileDialog, QTableView
from PyQt5.QtGui import QStandardItemModel, QStandardItem, QFont
import sqlite3
from Yolo import YoloModel
from TraditionalCV import TraditionalCV
from CombineModel import CombineModel
from CalculateEdge import CalculateEdgeLength
from secondMethod import secondMethod

class PandasModel(QtCore.QAbstractTableModel):
    def __init__(self, data):
        QtCore.QAbstractTableModel.__init__(self)
        self._data = data

    def rowCount(self, parent=None):
        return len(self._data)

    def columnCount(self, parent=None):
        return self._data.columns.size

    def data(self, index, role=QtCore.Qt.DisplayRole):
        if index.isValid():
            if role == QtCore.Qt.DisplayRole:
                return str(self._data.iloc[index.row(), index.column()])
        return None

    def headerData(self, section, orientation, role):
        if orientation == QtCore.Qt.Horizontal and role == QtCore.Qt.DisplayRole:
            return str(self._data.columns[section])
        return None

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1600, 950)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(100, 2, 101, 31))
        self.textEdit.setObjectName("textEdit")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(1, 10, 101, 17))
        self.label.setObjectName("label")

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(210, 10, 101, 17))
        self.label_2.setObjectName("label_2")

        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setGeometry(QtCore.QRect(310, 2, 101, 31))
        self.textEdit_2.setObjectName("textEdit_2")

        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(420, 10, 101, 17))
        self.label_3.setObjectName("label_3")

        self.textEdit_3 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_3.setGeometry(QtCore.QRect(470, 2, 101, 31))
        self.textEdit_3.setObjectName("textEdit_3")

        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(580, 10, 101, 17))
        self.label_4.setObjectName("label_4")

        self.textEdit_4 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_4.setGeometry(QtCore.QRect(610, 2, 101, 31))
        self.textEdit_4.setObjectName("textEdit_4")

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(720, 8, 89, 25))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setEnabled(False)
        self.pushButton.clicked.connect(self.display_image_measurement)


        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(830, 8, 89, 25))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.set_start)

        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(20, 40, 722, 482))
        self.graphicsView.setObjectName("graphicsView")
        # self.scene = QtWidgets.QGraphicsScene()
        # self.graphicsView.setScene(self.scene)
        # self.timer = QtCore.QTimer(self.graphicsView)
        # self.timer.timeout.connect(self.update_frame)
        # self.start_webcam()

        # self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        # self.pushButton_3.setGeometry(QtCore.QRect(70, 580, 89, 25))
        # self.pushButton_3.setObjectName("pushButton_3")

        # self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        # self.pushButton_4.setGeometry(QtCore.QRect(940, 8, 89, 25))
        # self.pushButton_4.setObjectName("pushButton_4")
        # self.pushButton_4.clicked.connect(self.video_streaming)

        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(940, 8, 89, 25))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.setEnabled(False)
        self.pushButton_5.clicked.connect(self.end_measurement)

        self.graphicsView_2 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_2.setGeometry(QtCore.QRect(20, 540, 722, 482))
        self.graphicsView_2.setObjectName("graphicsView_2")

        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setGeometry(QtCore.QRect(800, 40, 500, 482))
        self.tableView.setObjectName("tableView")

        self.tableView_2 = QtWidgets.QTableView(self.centralwidget)
        self.tableView_2.setGeometry(QtCore.QRect(800, 540, 500, 482))
        self.tableView_2.setObjectName("tableView_2")

        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(1350, 100, 300, 25))
        self.label_5.setObjectName("label_5")

        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(1350, 60, 300, 25))
        self.label_6.setObjectName("label_6")

        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(1600, 60, 300, 25))
        self.label_9.setObjectName("label_9")

        self.tableView_3 = QtWidgets.QTableView(self.centralwidget)
        self.tableView_3.setGeometry(QtCore.QRect(1350, 120, 450, 600))
        self.tableView_3.setObjectName("tableView_3")

        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(1350, 750, 300, 25))
        self.label_7.setObjectName("label_7")

        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(1350, 780, 300, 25))
        self.label_8.setObjectName("label_8")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1600, 22))
        self.menubar.setObjectName("menubar")
        
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Garment Style"))
        self.label_2.setText(_translate("MainWindow", "Pattern code"))
        self.label_3.setText(_translate("MainWindow", "Name"))
        self.label_4.setText(_translate("MainWindow", "Size"))
        self.label_5.setText(_translate("MainWindow", "Number of AQL is checking: 0"))
        self.label_6.setText(_translate("MainWindow", "Number of AQL must check: 0"))
        self.label_9.setText(_translate("MainWindow", "Tolerance: 0"))
        self.pushButton.setText(_translate("MainWindow", "Measure"))
        self.pushButton_2.setText(_translate("MainWindow", "Start"))
        # self.pushButton_3.setText(_translate("MainWindow", "Capture"))
        # self.pushButton_4.setText(_translate("MainWindow", "Video"))
        self.pushButton_5.setText(_translate("MainWindow", "End"))

    def start_webcam(self):
        self.cap = cv2.VideoCapture(0)
        self.timer.start(0)  # Update frame every 30 milliseconds

    def update_frame(self):
        ret, frame = self.cap.read()
        if ret:
            # Convert the frame to RGB format
            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            h, w, ch = frame_rgb.shape
            image = QImage(
                frame_rgb.data, w, h, ch * w, QImage.Format_RGB888
            )
            pixmap = QPixmap.fromImage(image)
            pixmap = pixmap.scaled(720, 480)
            self.scene.clear()
            self.scene.addPixmap(pixmap)

    def video_streaming(self):
        self.scene = QtWidgets.QGraphicsScene()
        self.graphicsView.setScene(self.scene)
        self.timer = QtCore.QTimer(self.graphicsView)
        self.timer.timeout.connect(self.update_frame)
        self.start_webcam()

    def display(self):
        self.scene1 = QtWidgets.QGraphicsScene()
        self.graphicsView.setScene(self.scene1)
        img = self.cam_process()
        imgshow = np.array(img)
        height, width, channel = imgshow.shape
        bytes_per_line = channel * width    
        image = QImage(imgshow.data, width, height, bytes_per_line, QImage.Format_RGB888)

        pixmap = QPixmap.fromImage(image)
        pixmap = pixmap.scaled(720, 480)
        self.scene1.clear()
        self.scene1.addPixmap(pixmap)
        
    def display_2(self):
        self.scene1_2 = QtWidgets.QGraphicsScene()
        self.graphicsView_2.setScene(self.scene1_2)
        image_2 = QImage("gr2.png")
        pixmap_2 = QPixmap.fromImage(image_2)
        pixmap_2 = pixmap_2.scaled(720, 480)
        self.scene1_2.clear()
        self.scene1_2.addPixmap(pixmap_2)

    def display_image_measurement(self):
        self.display()
        self.display_2()
        self.show_measurement()
        self.show_measurement_2()
        # self.countingAQL()
        self.AQL_table()
    
    def get_specs_info(self):
        textEdits = [
            self.textEdit,
            self.textEdit_2,
            self.textEdit_3,
            self.textEdit_4
        ]

        texts = []
        for textEdit in textEdits:
            text = textEdit.toPlainText()
            texts.append(text)
    
        return texts

    def set_start(self):
        self.textEdit.setText("")
        self.textEdit_2.setText("")
        self.textEdit_3.setText("")
        self.textEdit_4.setText("")
        self.tableView.setModel(None)
        self.tableView_2.setModel(None)
        self.tableView_3.setModel(None)
        self.scene = QtWidgets.QGraphicsScene()
        self.graphicsView.setScene(self.scene)
        self.timer = QtCore.QTimer(self.graphicsView)
        self.timer.timeout.connect(self.update_frame)
        self.start_webcam()
        self.graphicsView_2.setScene(None)
        self.AQL_count = 1
        self.OrdNum = []
        self.ResultAQL = []
        self.pushButton_2.setEnabled(False)
        self.pushButton.setEnabled(True)
        self.pushButton_5.setEnabled(True)
        self.run = 0
        self.label_5.setText("Number of AQL is checking: 0")
        self.label_6.setText("Number of AQL must check: 0")
        self.label_7.setText("")
        self.label_8.setText("")
        self.label_9.setText("Tolerance: 0")



    def show_measurement(self):
        conn = sqlite3.connect('databaseTest.db')  # Replace 'database.db' with your desired database name
        cursor = conn.cursor()
        text_insert = self.get_specs_info()

        df = pd.read_sql(f"SELECT Dimension_Name, Dimension_Value FROM data_specs WHERE Garment_Style = '{text_insert[0]}' AND Pattern_Code = '{text_insert[1]}' AND Piece_Name = '{text_insert[2]}' AND Size = {text_insert[3]}", conn)
        df['Measurement_Value'] = [1,2,3,4,5]

        headers = list(df.head(0))
        model = PandasModel(df)
        self.tableView.setModel(model)
        conn.close()

    def show_measurement_2(self):
        conn = sqlite3.connect('databaseTest.db')  # Replace 'database.db' with your desired database name
        cursor = conn.cursor()
        text_insert = self.get_specs_info()

        df_2 = pd.read_sql(f"SELECT Dimension_Name, Dimension_Value FROM data_specs WHERE Garment_Style = '{text_insert[0]}' AND Pattern_Code = '{text_insert[1]}' AND Piece_Name = '{text_insert[2]}' AND Size = {text_insert[3]}", conn)
        df_2['Measurement_Value'] = [1,2,3,4,5]

        headers = list(df_2.head(0))
        model_2 = PandasModel(df_2)
        self.tableView_2.setModel(model_2)
        conn.close()


    
    def AQL_table(self):
        dfAQL = pd.DataFrame()
        if self.run == 0:
            if self.AQL_count <= self.AQL_max:
                self.label_5.setText("Number of AQL: " + str(self.AQL_count))

                self.OrdNum.append(self.AQL_count)
                
                # Name_AQL = []
                text = self.get_specs_info()
                # textAQL = text[1] + text[3]
                # Name_AQL.append[textAQL]
                

                self.ResultAQL.append('Pass')

                dfAQL['OrdNum'] = self.OrdNum
                # dfAQL['NameAQL'] = Name_AQL
                dfAQL['Result'] = self.ResultAQL

                headers = list(dfAQL.head(0))
                modelAQL = PandasModel(dfAQL)
                self.tableView_3.setModel(modelAQL)
                self.AQL_count += 1

            if text[1] == "BB":
                self.AQL_max = 30
                self.label_6.setText("Number of AQL must check: " + str(self.AQL_max))
                self.label_9.setText("Tolerance: 1/8")
            else:
                self.AQL_max = 20
                self.label_6.setText("Number of AQL must check: " + str(self.AQL_max))
                self.label_9.setText("Tolerance: 1/16")
        else:
            dfAQL['OrdNum'] = self.OrdNum
            # dfAQL['NameAQL'] = Name_AQL
            dfAQL['Result'] = self.ResultAQL
            return dfAQL

    countPass = 0
    def end_measurement(self):
        self.cap.release()
        self.pushButton.setEnabled(False)
        self.pushButton_2.setEnabled(True)
        self.pushButton_5.setEnabled(False)
        
        self.run = 1 
        dfEnd = self.AQL_table()
        for i in range(len(dfEnd['Result'])):
            if dfEnd['Result'][i] == 'Pass':
                self.countPass += 1

        P_pass = self.countPass / (self.AQL_count-1)
        self.label_7.setText("Pass: " + str(P_pass*100) + '%')
        self.label_8.setText("Reject: " + str((1-P_pass)*100) + '%')



    def cam_process(self):
        image_path = self.take_photo()
        # Yolo Model
        Yolo = YoloModel()
        Yolo.process(image_path)
        yolo_corners = Yolo.keypoints_yolo  

        # CV Model
        TradCV = TraditionalCV(thresholdType = cv2.THRESH_BINARY, numCorners = 6)
        TradCV.process(image_path)
        cv_corners, mask = TradCV.finalCorner, TradCV.maskAccurate

        # Combine Yolo and CV to find orientation
        Combine = CombineModel(yolo_corners, cv_corners, TradCV.threshold)
        Combine.process(num_corners = 6, mode = 'A')
        # cv2.imwrite('2ndmethod.png', Combine.cutting_image_2ndMethod())
        imageDisplay_1 = Combine.imageOnlyCorners 


        # Calculate the length of edge
        Edge = CalculateEdgeLength(mask, Combine.combineCorners, TradCV.threshold)
        Edge.process()
        print(Edge.finalLengthList)
        return imageDisplay_1


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
